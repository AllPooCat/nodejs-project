/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

class Dom {
    static mount(el, parentNode, beforeNode) {
        if (beforeNode) {
            parentNode.insertBefore(el, beforeNode);
        }
        else {
            parentNode.appendChild(el);
        }
    }
    static unmount(el) {
        if (el.parentNode) {
            el.parentNode.removeChild(el);
        }
    }
    static find(el, selectors) {
        const results = Dom.findAll(el, selectors);
        if (results.length > 0) {
            return results[0];
        }
        else {
            return null;
        }
    }
    static findAll(el, selectors) {
        if (Dom.querySelector) {
            return Dom.querySelector(el, selectors);
        }
        else {
            let elements = [];
            el.querySelectorAll(selectors).forEach((node) => {
                elements.push(node);
            });
            return elements;
        }
    }
}
Dom.querySelector = undefined;

class View {
    constructor(props) {
        this.props = props || {};
    }
    create() {
        if (this.props.willRender) {
            this.props.willRender(this);
        }
        this.el = this.render();
        View.setInstance(this.el, this);
        if (this.props.didRender) {
            this.props.didRender(this);
        }
        return this.el;
    }
    mount(parentNode, beforeNode) {
        if (!this.el) {
            this.create();
        }
        Dom.mount(this.el, parentNode, beforeNode);
        if (this.props.didMount) {
            this.props.didMount(this);
        }
        this.getSubViews().forEach(view => {
            if (view.props.didMount) {
                view.props.didMount(view);
            }
        });
    }
    unmount() {
        Dom.unmount(this.el);
        if (this.props.didUnmount) {
            this.props.didUnmount(this);
        }
        this.getSubViews().forEach(view => {
            if (view.props.didUnmount) {
                view.props.didUnmount(view);
            }
        });
    }
    refresh() {
        //not mounted
        if (!this.el.parentNode) {
            this.create();
            return;
        }
        //get before node
        const parentNode = this.el.parentNode;
        let beforeNode = undefined;
        for (let i = 0; i < parentNode.childNodes.length; i++) {
            if (parentNode.childNodes[i] === this.el) {
                if (i + 1 < parentNode.childNodes.length) {
                    beforeNode = parentNode.childNodes[i + 1];
                }
                break;
            }
        }
        this.unmount();
        this.create();
        this.mount(parentNode, beforeNode);
    }
    delay(timespan) {
        return new Promise((resolve) => {
            setTimeout(() => {
                resolve();
            }, timespan);
        });
    }
    test() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(new Date().toJSON());
            yield this.delay(3000);
            console.log("Abcd".startsWith('Ab') ? 'xx' : 'yy');
            console.log(new Date().toJSON());
        });
    }
    //utility
    find(selectors) {
        return Dom.find(this.el, selectors);
    }
    findAll(selectors) {
        return Dom.findAll(this.el, selectors);
    }
    static setInstance(element, instance) {
        element.yokaViewInstance = instance;
    }
    static getInstance(element) {
        const instance = element.yokaViewInstance;
        return instance ? instance : undefined;
    }
    getSubViews() {
        return this.getSubViewsInner(this.el);
    }
    getSubViewsInner(parentNode) {
        let views = [];
        for (let i = 0; i < parentNode.childNodes.length; i++) {
            const view = View.getInstance(parentNode.childNodes[i]);
            if (view) {
                views.push(view);
            }
            this.getSubViewsInner(parentNode.childNodes[i]).forEach((view) => views.push(view));
        }
        return views;
    }
}

class Refresher extends View {
    render() {
        return this.props.render();
    }
}

const Fragment = "<></>";
function appendChild(parent, child) {
    if (typeof child === "undefined" || child === null) {
        return;
    }
    if (Array.isArray(child)) {
        for (const value of child) {
            appendChild(parent, value);
        }
    }
    else if (typeof child === "string") {
        parent.appendChild(document.createTextNode(child));
    }
    else if (child instanceof Node) {
        parent.appendChild(child);
    }
    else if (typeof child === "boolean") ;
    else if (typeof child === 'object' && typeof child['render'] === 'function') {
        parent.appendChild(child['render']());
    }
    else {
        parent.appendChild(document.createTextNode(String(child)));
    }
}
function createElement(tagName, attributes, ...children) {
    if (tagName === Fragment) {
        return document.createDocumentFragment();
    }
    else if (typeof tagName === 'function') {
        const props = {
            children: children
        };
        if (attributes) {
            for (const key of Object.keys(attributes)) {
                props[key] = attributes[key];
            }
        }
        return new tagName(props).create();
    }
    else if (typeof tagName === 'string') {
        const element = document.createElement(tagName);
        if (attributes) {
            for (const key of Object.keys(attributes)) {
                const attributeValue = attributes[key];
                if (key === "className") { // JSX does not allow class as a valid name
                    element.setAttribute("class", attributeValue);
                }
                else if (key.substr(0, 2) === "on" && typeof attributes[key] === "function") {
                    element.addEventListener(key.substring(2), attributeValue);
                }
                else {
                    // <input disable />      { disable: true }
                    // <input type="text" />  { type: "text"}
                    if (typeof attributeValue === "boolean" && attributeValue) {
                        element.setAttribute(key, "");
                    }
                    else {
                        element.setAttribute(key, attributeValue);
                    }
                }
            }
        }
        for (const child of children) {
            appendChild(element, child);
        }
        return element;
    }
    else {
        throw new Error('Element Not Supports.');
    }
}



var Yoka = /*#__PURE__*/Object.freeze({
    __proto__: null,
    View: View,
    Refresher: Refresher,
    createElement: createElement
});

export default Yoka;
//# sourceMappingURL=index.es.js.map
