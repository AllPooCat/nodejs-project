export interface ViewProps {
    children?: HTMLElement;
    willRender?: (context: any) => void;
    didRender?: (context: any) => void;
    didMount?: (context: any) => void;
    didUnmount?: (context: any) => void;
}
export declare abstract class View<P = {}> {
    props: P & ViewProps;
    el: HTMLElement;
    constructor(props?: P & ViewProps);
    protected abstract render(): HTMLElement;
    create(): HTMLElement;
    mount(parentNode: Node, beforeNode?: Node): void;
    unmount(): void;
    refresh(): void;
    delay(timespan: number): Promise<void>;
    test(): Promise<void>;
    find<E extends Element = Element>(selectors: string): E | null;
    findAll<E extends Element = Element>(selectors: string): E[];
    private static setInstance;
    static getInstance(element: Node): View | undefined;
    getSubViews(): View[];
    private getSubViewsInner;
}
